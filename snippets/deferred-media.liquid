{% comment %}
  Renders a deferred media object with a poster image and a media player.

  Accepts:
  - delayed_media: Image object to use as the poster image (required)
  - section_id: ID of the section containing the media (required)
  - media_poster_classes: Additional classes to apply to the poster image (optional)
  - enable_video_loop: Whether to loop the video (required)
  - show_controls: Whether to show video controls (required)
  - enable_autoplay: Whether to autoplay the video (required)
  - padding_style: Padding style to apply to the media wrapper (required)
  - media_wrapper_classes: Additional classes to apply to the media wrapper (optional)
  - active_media_class: Class to apply to the active media element (optional)
  - aspect_ratio: Aspect ratio to apply to the media wrapper (optional)
  - media_product: Product object (required)
  - media_type: Type of media eg. 'grid' or 'slider' (required for autoplay)

  Usage:
    {% render delayed_media with delayed_media: media, enable_video_loop: enable_video_loop, padding_style: padding_style, media_wrapper_classes: 'product-single__media__wrapper' %}
{% endcomment %}

{% liquid 
  if aspect_ratio == 'adapt_to_first_image'
    assign first_image_ratio = media_product.media.first.preview_image.aspect_ratio
    assign adapt_ratio = 1 | divided_by: first_image_ratio | times: 100
  endif

  if aspect_ratio
    assign ratio_class = 'product-external-media-ratio--' | append: aspect_ratio
  endif

  if media_type == 'slider' and delayed_media.media_type == 'model'
    assign enable_autoplay = false
  endif

  assign muted = false
  if enable_autoplay
    assign muted = true
  endif
%}

{{ 'component-deferred-media.min.css' | asset_url | stylesheet_tag }}

{% if aspect_ratio == 'original' %}
  {% if delayed_media.aspect_ratio %}
    {% capture padding_style %}style="padding-top: {{ 1 | divided_by: delayed_media.aspect_ratio | times: 100 }}%"{% endcapture %}
  {% else %}
    {% capture padding_style %}style="padding-top: {{ 1 | divided_by: delayed_media.preview_image.aspect_ratio | times: 100 }}%"{% endcapture %}
  {% endif %}
{% elsif aspect_ratio == 'adapt_to_first_image' %}
  {% capture padding_style %}style="padding-top: {{ adapt_ratio }}%"{% endcapture %}
{% endif %}

<safe-load-scripts class="hidden">
  <script src="{{ 'component-deferred-media.js' | asset_url }}" defer="defer" type="module" data-flow-load-key="deferred-media"></script>
</safe-load-scripts>

{% if delayed_media %}
  <deferred-media
    data-media-id="{{ delayed_media.id }}"
    data-section-id="{{ section_id }}"
    data-auto-play="{{ enable_autoplay }}"
    data-media-layout="{{ media_type }}"
    data-show-controls="{{ show_controls }}"
    data-media-count="{{ product.media.size }}"
    {% if active_media_class %}data-active-media-class="{{ active_media_class }}"{% endif %}
  >
    <div class="product-media-poster-image" {{ padding_style }}>
      <img
        data-media-poster
        class="{% if media_poster_classes %}{{ media_poster_classes }}{% endif %}{% if aspect_ratio %} product-media-ratio--{{ aspect_ratio }}{% endif %}"
        src="{{ delayed_media.preview_image | image_url: width: 1445 }}"
        alt="{% if delayed_media.alt %}{{ delayed_media.alt }}{% else %}{{ media_product.title }}{% endif %}"
        width="{{ delayed_media.preview_image.width }}"
        height="{{ delayed_media.preview_image.height }}"
        sizes="(min-width: 1200px) calc((1200px - 10rem) / 2), (min-width: 750px) calc((100vw - 11.5rem) / 2), calc(100vw - 4rem)"
        loading="eager"
      />
    </div>

    <template>
      {%- case delayed_media.media_type -%}
        {%- when 'external_video' -%}
          {%- liquid
            assign video_class = 'js-' | append: delayed_media.host
          -%}
          {%- if delayed_media.host == 'youtube' -%}
            <div data-media-wrapper {{ padding_style }} class="type-{{ delayed_media.host }}{% if media_wrapper_classes %} {{ media_wrapper_classes }}{% endif %} {{ ratio_class }}">
              <div class="media-buffer--left"></div>
              {{ delayed_media | external_video_url: autoplay: true, mute: muted, loop: enable_video_loop, controls: show_controls, playlist: delayed_media.external_id | external_video_tag: class: video_class, loading: "lazy" }}
              <div class="media-buffer--right"></div>
              {% comment %} Loading icon {% endcomment %}
              <div class="hidden" data-media-loading-icon>
                {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x', iconSize: '1.6em' %}
              </div>
            </div>
          {%- else -%}
            <div data-media-wrapper {{ padding_style }} class="type-{{ delayed_media.host }}{% if media_wrapper_classes %} {{ media_wrapper_classes }}{% endif %} {{ ratio_class }}">
              <div class="media-buffer--left"></div>
              {{ delayed_media | external_video_url: autoplay: true, muted: muted, loop: enable_video_loop, controls: show_controls | external_video_tag: class: video_class, loading: "lazy" }}
              <div class="media-buffer--right"></div>
              {% comment %} Loading icon {% endcomment %}
              <div class="hidden" data-media-loading-icon>
                {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x', iconSize: '1.6em' %}
              </div>
            </div>
          {%- endif -%}
        {%- when 'video' -%}
          {% liquid 
            assign video_class = 'plyr'
          %}
          <div data-media-wrapper {{ padding_style }} class="{% if media_wrapper_classes %}{{ media_wrapper_classes }}{% endif %} {{ ratio_class }}">
            {{ 'plyr.min.css' | asset_url | stylesheet_tag }}
            {{ delayed_media | media_tag: image_size: "2048x", class: video_class, autoplay: true, loop: enable_video_loop, controls: show_controls, muted: muted, preload: "none" }}
            {% comment %} Loading icon {% endcomment %}
            <div class="hidden" data-media-loading-icon>
              {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x', iconSize: '1.6em' %}
            </div>
          </div>
        {%- when 'model' -%}
          <div data-media-wrapper {{ padding_style }} class="{% if media_wrapper_classes %}{{ media_wrapper_classes }}{% endif %} {{ ratio_class }}">
            <div class="media-buffer--left"></div>
            {{ 'shopify-model-viewer-ui.min.css' | asset_url | stylesheet_tag }}
            {{ delayed_media | media_tag: image_size: "2048x", toggleable: true }}
            <div class="media-buffer--right"></div>
          </div>
      {%- endcase -%}
    </template>

    {% if delayed_media.media_type == 'video' or delayed_media.media_type == 'external_video' %}
      <button
        type="button"
        class="round-icon-btn-lg btn-colors-primary btn-hover-default icon-btn-focus"
        tabindex="0"
        data-media-id="{{ delayed_media.id }}"
        data-media-play-button
        aria-label="{{ 'general.accessibility.play_icon.play_media' | t }}"
      >
        {% render 'theme-icon' with icon: 'play', iconSize: 20 %}
      </button>
    {% endif %}

    {% if delayed_media.media_type == 'model' %}
      <button
        type="button"
        class="round-icon-btn-lg btn-colors-primary btn-hover-default icon-btn-focus"
        tabindex="0"
        data-media-id="{{ delayed_media.id }}"
        data-media-play-button
        aria-label="{{ 'general.accessibility.3d_model.load_3d_model' | t }}"
      >
        {% render 'theme-icon' with icon: 'cube', iconSize: 20 %}
      </button>
    {% endif %}
  </deferred-media>
{% endif %}